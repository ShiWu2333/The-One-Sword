using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

public class BulletSpawner : MonoBehaviour
{
    private float[][] fireIntervals =
    {
        new float[] // Level 0 的数据
        {
        2.47842f, 4.1984f, 5.05905f, 5.47913f, 5.90049f, 6.33922f,
        6.75847f, 7.19999f, 7.62034f, 8.48127f, 9.34101f, 11.9186f,
        12.75976f, 13.20078f, 13.63966f, 14.48155f, 15.33805f, 15.7587f,
        16.19818f, 16.62198f, 17.05953f, 17.48172f, 17.90035f, 18.76107f,
        19.20132f, 19.62014f, 20.03852f, 20.48059f, 20.90102f, 21.33837f,
        21.75944f, 22.19835f, 22.61924f, 23.48037f, 23.92036f, 24.34088f,
        24.76171f, 26.06174f, 26.48196f, 26.89869f, 27.34154f, 27.76021f,
        28.61884f, 29.03937f, 29.48169f, 29.90003f, 30.33804f, 30.75812f,
        31.20065f, 31.61848f, 32.06084f, 32.48061f, 32.90013f, 33.34158f,
        33.75813f, 34.2018f, 34.62043f, 35.06029f, 35.47987f, 35.90072f,
        36.34128f, 36.75824f, 37.20136f, 37.61978f, 38.06166f, 38.47918f,
        38.89839f, 39.3409f, 39.75953f, 40.19817f, 40.61951f, 41.05946f,
        41.4812f, 41.9002f, 42.33895f, 42.75828f, 43.20017f, 43.61867f,
        44.05869f, 44.47963f, 44.89959f, 45.34087f, 45.76067f, 46.19951f,
        46.62137f, 47.05886f, 47.48015f, 47.89907f, 48.34f, 48.7618f,
        49.19805f, 49.62185f, 50.05839f, 50.48177f, 50.89859f, 51.33855f,
        51.75823f, 52.19935f, 52.62163f, 53.03845f, 53.4787f, 53.90141f,
        54.3416f, 55.20198f, 55.6182f, 56.05952f, 56.48178f, 56.91987f,
        57.75813f, 58.20092f, 58.62137f, 59.06189f, 59.48038f, 60.33946f,
        61.20003f, 62.06014f, 62.47803f, 62.8999f, 63.34039f, 63.75965f,
        64.61875f, 65.48154f, 66.34113f, 67.2003f, 68.05967f, 68.48097f,
        68.92126f, 69.75867f, 70.19857f, 70.61822f, 71.48044f, 72.34047f,
        73.19927f, 74.05933f, 74.91875f, 75.76078f, 76.62117f, 77.06174f,
        77.4801f, 78.33819f, 79.19972f, 80.06018f, 80.47939f, 80.92027f,
        81.76185f, 82.62055f, 83.47927f, 84.33982f, 85.19813f, 86.06137f,
        86.4792f, 86.90083f, 87.34119f, 87.75929f, 88.19908f, 88.61874f,
        89.06134f, 89.47909f, 89.90153f, 90.33879f, 90.75917f, 91.20149f,
        92.06064f, 92.48165f, 92.90185f, 93.33839f, 93.75979f, 94.61969f,
        95.03903f, 95.47891f, 95.89893f, 96.3393f, 96.75916f, 97.20152f,
        97.61901f, 98.05966f, 98.47835f, 98.89976f, 99.34111f, 99.76045f,
        100.19845f, 100.61934f, 101.0582f, 101.47984f, 102.3419f, 102.75906f,
        103.19914f, 103.62019f, 104.05989f, 104.48003f, 104.90136f, 105.33995f,
        105.7594f, 106.20024f, 106.62055f, 107.47875f, 107.90104f, 108.34111f,
        108.76181f, 109.20194f, 111.34052f, 112.20158f, 113.05999f, 113.91964f,
        114.75891f, 115.62005f, 116.48191f, 117.34083f, 118.20027f, 119.04187f,
        119.90013f, 120.7606f, 121.62064f, 122.47974f, 123.33808f, 124.20027f,
        125.06001f, 125.92141f, 126.7602f, 127.61869f, 128.48088f, 129.33846f,
        129.75841f, 130.20008f, 131.06147f, 131.90029f, 132.76162f, 133.61925f,
        134.47923f, 135.3387f, 136.19955f, 137.05944f, 137.47925f, 138.75971f,
        139.62098f, 140.04124f, 140.48101f, 140.89827f, 141.34095f, 141.75843f,
        142.1998f, 142.61829f, 143.05873f, 143.47997f, 143.89854f, 144.34007f,
        144.76061f, 145.20183f, 145.62114f, 146.06135f, 146.48124f, 146.89982f,
        147.33865f, 147.7599f, 148.19964f, 148.62089f, 149.06048f, 149.47888f,
        149.90059f, 150.34036f, 150.75856f, 151.19818f, 151.6216f, 152.48144f,
        152.89847f, 153.33933f, 153.76116f, 154.20153f, 154.61987f, 155.05934f,
        155.47989f, 155.89824f, 156.33939f, 157.19882f, 157.62098f, 158.06059f,
        158.47834f, 158.89819f, 159.3384f, 159.75898f, 160.19852f, 160.61994f,
        161.06049f, 161.47996f, 161.89918f, 162.34f, 163.20178f, 163.62065f,
        164.48158f, 165.33806f, 165.76137f, 166.20057f, 169.18041f, 170.92161f,
        171.75938f, 172.19977f, 172.61824f, 173.48199f, 174.34172f, 175.19948f,
        175.62085f, 176.06089f, 176.9217f, 177.76184f, 178.61856f, 179.05862f,
        179.4786f, 180.33823f, 181.20123f, 181.6202f, 182.0615f, 182.47843f,
        182.91834f, 183.76093f, 184.20115f, 184.62088f, 185.47937f, 185.92098f,
        186.34112f, 187.2007f, 188.06057f, 188.91914f, 189.3386f, 189.7593f,
        190.62142f, 191.06029f, 191.47862f, 192.34158f, 193.19909f, 194.06067f,
        194.91919f, 195.34006f, 195.75992f, 196.20079f, 196.62032f, 197.47921f,
        197.9197f, 198.33882f, 199.19803f, 200.06168f, 200.89937f, 201.75852f,
        202.61869f, 203.06159f, 203.47912f, 204.34124f, 205.19953f, 206.06083f,
        206.92153f, 207.75931f, 208.19979f, 208.61938f, 209.06146f, 209.47957f,
        209.91933f, 210.34059f, 211.19911f, 211.61857f, 212.06004f, 212.92186f,
        213.34163f, 213.76069f, 214.61946f, 215.48125f, 216.34107f, 216.7589f,
        217.20005f, 218.06093f, 218.47989f, 218.92132f, 219.33957f, 219.76136f,
        220.19812f, 220.61832f, 221.48033f, 222.3385f, 223.20002f, 223.61903f,
        224.06093f, 225.3397f, 225.75906f, 226.61913f, 227.48152f, 228.33848f,
        229.2007f, 230.05836f, 230.4787f, 230.92127f, 231.76123f, 232.62147f,
        233.47954f, 234.33936f, 235.20128f, 235.61813f, 236.05907f, 236.91815f,
        237.33951f, 237.75843f, 238.61986f, 239.06153f, 239.47905f, 240.33942f,
        241.20037f, 242.05984f, 242.92004f, 243.75877f, 244.19956f, 244.62082f,
        245.47938f, 246.34134f, 247.19953f, 248.05927f, 249.75842f, 250.62064f,
        251.47916f, 252.34125f, 253.19853f, 254.06004f, 254.9197f, 255.76021f,
        256.61907f, 257.48198f, 257.91964f, 258.33994f, 259.19962f, 260.05992f,
        260.92114f, 261.75993f, 262.61905f, 263.47842f, 264.3393f, 264.76182f,
        265.19976f, 266.06041f, 266.90089f, 267.76135f, 268.19812f, 268.61813f,
        269.48028f, 270.33801f, 271.19932f, 271.62096f, 272.06153f, 272.47977f,
        273.33886f, 273.75872f, 274.62191f, 275.47905f, 276.3407f, 276.75913f,
        277.19843f, 277.6215f, 278.05981f, 278.48015f, 279.3404f, 279.7599f,
        280.20028f, 280.61974f, 281.47919f, 281.89932f, 282.3405f, 282.7599f,
        283.20023f, 283.61995f, 284.47917f, 285.34083f, 285.75982f, 286.62f,
        287.05951f, 287.48028f, 287.90123f, 288.75829f, 289.61814f, 290.47804f,
        291.3403f, 292.19891f, 293.06164f, 293.47817f, 293.89839f, 294.34071f,
        294.75865f, 295.61965f, 296.47853f, 296.90067f, 297.34016f, 297.76015f,
        298.19862f, 299.90173f, 300.75812f, 301.62137f, 302.48023f, 303.33883f,
        303.75866f, 304.20122f, 305.91864f,

        },

        new float[] // Level 1 的数据
        {
            3.23928f, 4.84074f, 5.23957f, 6.43965f, 8.43899f, 9.66062f,
            11.65851f, 12.86023f, 15.65967f, 17.2611f, 18.06067f, 18.86094f,
            19.25846f, 20.46166f, 21.06058f, 21.25927f, 28.06085f, 29.2581f,
            34.46102f, 34.8586f, 40.85802f, 41.2582f, 45.26099f, 45.66127f,
            47.2609f, 48.05972f, 48.85911f, 50.46057f, 50.85854f, 52.46176f,
            53.66116f, 54.66141f, 54.85971f, 56.86167f, 57.25937f, 58.05953f,
            58.46082f, 60.05936f, 60.46052f, 62.86091f, 63.25886f, 66.05854f,
            66.45992f, 67.65833f, 68.45888f, 69.26047f, 69.65891f, 70.85992f,
            71.26131f, 74.86176f, 76.45898f, 77.25887f, 77.66088f, 80.06018f,
            80.45903f, 81.65985f, 85.26169f, 86.06137f, 86.86044f, 87.65833f,
            88.46028f, 89.25889f, 90.06084f, 90.85818f, 92.461f, 93.25893f,
            94.03821f, 94.86069f, 95.66087f, 100.0614f, 103.66101f, 112.86084f,
            115.65918f, 117.2592f, 118.85825f, 120.86156f, 122.06025f, 124.06149f,
            124.45855f, 125.65976f, 129.26044f, 130.45963f, 133.25974f, 134.86135f,
            136.85897f, 137.26066f, 138.46052f, 139.65826f, 143.26046f, 147.65847f,
            148.05886f, 149.65933f, 150.45864f, 150.85996f, 152.44115f, 152.8594f,
            154.06046f, 154.86023f, 155.63866f, 156.05806f, 157.25846f, 158.8399f,
            159.25848f, 160.45978f, 160.86185f, 162.46128f, 162.86104f, 163.65927f,
            164.45958f, 165.23997f, 165.65954f, 166.85805f, 167.66113f, 168.43838f,
            168.85826f, 170.0597f, 171.65961f, 172.05953f, 173.26059f, 173.65849f,
        174.45865f, 174.65808f, 176.04042f, 177.23857f
        },
        new float[] // Level 2 的数据
        {
            4.718311f, 7.080926f, 8.159974f, 8.579452f, 9.878297f, 10.501001f, 11.998129f, 13.300236f,
            13.938791f, 15.439067f, 17.358687f, 19.720610f, 20.160456f, 20.801320f, 21.440952f, 22.299606f,
            24.661146f, 25.718342f, 26.581840f, 26.801836f, 28.301326f, 29.160495f, 30.001938f, 31.941241f,
            32.578182f, 38.160761f, 39.019601f, 40.740362f, 42.441899f, 44.159806f, 45.878564f, 49.300944f,
            51.019681f, 51.879254f, 52.738950f, 57.880576f, 58.720795f, 59.379721f, 59.578935f, 59.798711f,
            60.019028f, 60.241643f, 61.298335f, 63.020977f, 63.438301f, 64.300395f, 64.741865f, 66.880596f,
            68.158044f, 69.880016f, 71.601919f, 73.299053f, 75.020519f, 76.741601f, 77.160859f, 78.018607f,
            78.440114f, 80.160446f, 81.879148f, 83.598637f, 84.879698f, 85.301735f, 86.159302f, 86.801040f,
            87.019378f, 87.438598f, 88.740945f, 89.161227f, 89.581306f, 90.439329f, 91.301395f, 92.161714f,
            92.578124f, 93.019452f, 93.858048f, 95.579363f, 96.860749f, 97.300460f, 99.021608f, 99.880971f,
            103.301571f, 104.160885f, 104.580608f, 105.018151f, 105.878671f, 106.300535f, 106.740939f, 107.581342f,
            108.440604f, 109.299074f, 110.579226f, 111.021043f, 111.440027f, 112.719661f, 113.579138f, 114.439979f,
            115.301512f, 116.158026f, 117.661337f, 117.880107f, 119.580367f, 119.798579f, 121.079530f, 121.299743f,
            121.500977f, 123.018522f, 123.218211f, 124.081571f, 124.499086f, 124.738400f, 125.138593f, 125.580357f,
            126.439071f, 126.859013f, 127.301346f, 128.161793f, 129.881171f, 131.380982f, 133.301388f, 134.799052f,
            135.021638f, 136.738173f, 138.218926f, 138.460518f, 139.301726f, 140.579408f, 141.018723f, 141.659870f,
            141.880901f, 147.021790f, 147.880077f, 148.738884f, 152.158663f, 153.881676f, 159.019726f, 161.600904f,
            162.441984f, 164.161742f, 165.881288f, 167.581380f, 168.438381f, 169.300609f, 169.521602f, 172.718554f,
            176.161332f, 179.581453f, 183.020978f, 184.741158f, 186.439885f, 188.160478f, 189.861325f, 191.580979f,
            193.298194f, 195.019672f, 196.521305f, 196.741926f, 197.160522f, 197.380054f, 199.300614f, 200.579964f
        },
        new float[] { 0.6f, 0.9f, 1.2f, 0.8f, 1.5f, 0.3f }, // Level 3 的数据
        // 可以继续添加更多关卡的发射间隔
    };

    // 定义每个关卡的子弹类型序列
    public BulletType[][] bulletSequences =
    {
        new BulletType[] { BulletType.Normal, BulletType.Heavy },
        new BulletType[] { BulletType.Normal, BulletType.Heavy },
        new BulletType[] { BulletType.Normal, BulletType.Heavy },
        new BulletType[] { BulletType.Normal, BulletType.Heavy },
        // 可以继续添加更多关卡的子弹类型序列
    };

    public int currentLevel = 0; // 当前关卡
    public float bpm;

    private bool isFiring = false; // 添加一个标志位，防止重复启动协程

    public enum BulletType
    {
        Normal,
        Heavy,
    }

    public BulletType bulletType;
    public GameObject bullet; // 普通子弹的预制体
    public GameObject heavyBullet; // 重型子弹的预制体
    public GameObject spawnPoint;

    private float startTime;
    private GameObject bulletToSpawn;
    [SerializeField] private float HeavyBulletThreshold; //发射重型子弹的阈值，间隔大于多少秒会发射重型子弹

    [SerializeField] AudioSource audioSource;

    [SerializeField] private float maxBulletSpeed;
    [SerializeField] private float traMaxHeight;
    [SerializeField] private Transform target;
    [SerializeField] private AnimationCurve traAniCurve;
    [SerializeField] private AnimationCurve axisCorrectionAniCurve;
    [SerializeField] private AnimationCurve speedAniCurve;
    

    [SerializeField] private bool canSpawn;
    [SerializeField] private GameObject player;

    private void Start()
    {
        PlayerController playerController = GetComponent<PlayerController>();
        StartCoroutine(FireBulletGroup());
        startTime = Time.time;
    }


    void Update()
    {
        //Debug.Log(timer);
        if (canSpawn && !isFiring)
        {
            StartCoroutine(FireBulletGroup());
             
        }
        
    }

    IEnumerator FireBulletGroup()
    {
        startTime = Time.time;
        isFiring = true;
        float[] fireTimes = fireIntervals[currentLevel]; // 记录子弹的发射时间，单位为 beat
        BulletType[] currentBulletSequence = new BulletType[fireTimes.Length]; // 用于存放发射的子弹类型

        float beatDuration = 60f / bpm; // 每个 beat 对应的时间（秒）
        int bulletIndex = 0;

        while (bulletIndex < fireTimes.Length)
        {
            float currentTimeInBeats = GetTimeInBeats();

            // 如果当前的 beat 数达到了下一个子弹的发射时间
            if (currentTimeInBeats >= fireTimes[bulletIndex])
            {
                // 计算当前子弹与前一个子弹的时间间隔
                if (bulletIndex > 0)
                {
                    float interval = fireTimes[bulletIndex] - fireTimes[bulletIndex - 1];

                    // 如果间隔大于等于 3 beat，发射重型子弹，否则发射普通子弹
                    if (interval >= 3f)
                    {
                        currentBulletSequence[bulletIndex] = BulletType.Heavy;
                    }
                    else
                    {
                        currentBulletSequence[bulletIndex] = BulletType.Normal;
                    }
                }
                else
                {
                    currentBulletSequence[bulletIndex] = BulletType.Normal;
                }

                SpawnBullet(currentBulletSequence[bulletIndex]); // 发射子弹
                bulletIndex++; // 继续下一个子弹

                // 等待一帧再检查是否需要发射更多子弹
                yield return null;
            }

            // 等待一帧再继续检查时间
            yield return null;
        }

        isFiring = false;
    }

    public float GetTimeInBeats()
    {
        float beatDuration = 60f / bpm; // 每个 beat 对应的时间（秒）
        float elapsedTime = Time.time - startTime; // 计算从场景开始到现在经过的时间（秒）
        float currentTimeInBeats = elapsedTime / beatDuration; // 将场景时间转换为 beat

        return currentTimeInBeats;
    }

    public void SpawnBullet(BulletType bulletType)
    {
        GameObject bulletToSpawn = null;
        switch (bulletType)
        {
            case BulletType.Normal:
                bulletToSpawn = bullet;
                break;
            case BulletType.Heavy:
                bulletToSpawn = heavyBullet;
                break;
        }

        // 确保选择了一个子弹
        if (bulletToSpawn != null)
        {
            BaseBullet bullet = Instantiate(bulletToSpawn, spawnPoint.transform.position, spawnPoint.transform.rotation).GetComponent<BaseBullet>();
            bullet.InitializeBullet(target, maxBulletSpeed, traMaxHeight);
            bullet.InitializeAniCurve(traAniCurve, axisCorrectionAniCurve, speedAniCurve);
        }
        
    }

    public void DestroyBullet()
    {
        DestroyImmediate(bullet, true);
    }

}
